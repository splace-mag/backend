{
  "name": "epiceditor",
  "version": "0.2.0",
  "author": {
    "name": "Oscar Godson",
    "email": "oscargodson@gmail.com",
    "url": "http://oscargodson.com"
  },
  "description": "An Embeddable Markdown Editor",
  "devDependencies": {
    "uglify-js": "1.3.3",
    "jshint": "0.7.2",
    "mocha": "1.3.2",
    "expect.js": "0.1.2",
    "mime": "1.2.7",
    "marked": "0.2.7"
  },
  "keywords": [
    "embeddable",
    "markdown",
    "editor"
  ],
  "contributors": [
    {
      "name": "Oscar Godson",
      "email": "oscargodson@gmail.com",
      "url": "http://oscargodson.com"
    },
    {
      "name": "John Donahue",
      "email": "johnmdonahue@gmail.com",
      "url": "http://johnmdonahue.com"
    }
  ],
  "license": {
    "type": "MIT",
    "url": "https://raw.github.com/OscarGodson/EpicEditor/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:OscarGodson/EpicEditor.git"
  },
  "scripts": {
    "test": "jake test"
  },
  "readme": "# ![EpicEditor](http://epiceditor.com/docs/images/epiceditor-logo.png)\n\n## An Embeddable JavaScript Markdown Editor\n\nEpicEditor is an embeddable JavaScript [Markdown](http://daringfireball.net/projects/markdown/) editor with split fullscreen editing, live previewing, automatic draft saving, offline support, and more. For developers, it offers a robust API, can be easily themed, and allows you to swap out the bundled Markdown parser with anything you throw at it.\n\n## Why\n\nBecause, WYSIWYGs suck. Markdown is quickly becoming the replacement. [GitHub](http://github.com), [Stackoverflow](http://stackoverflow.com), and even blogging apps like [Posterous](http://posterous.com) are now supporting Markdown. EpicEditor allows you to create a Markdown editor with a single line of JavaScript:\n\n```javascript\nvar editor = new EpicEditor().load();\n```\n\n## Quick Start\n\nEpicEditor is easy to implement. Add the script and assets to your page, provide a target container and call `load()`.\n\n### Step 1: Download\n\n[Download the latest release](http://epiceditor.com) or clone the repo:\n\n```bash\n$ git clone git@github.com:OscarGodson/EpicEditor\n```\n\n### Step 2: Create your container element\n\n```html\n<div id=\"epiceditor\"></div>\n```\n\n### Step 3: Add the `epiceditor.js` file\n\n```html\n<script src=\"epiceditor.min.js\"></script>\n```\n\n### Step 4: Init EpicEditor\n\n```javascript\nvar editor = new EpicEditor().load();\n```\n\n## API\n\n### EpicEditor([_options_])\n\nThe `EpicEditor` constructor creates a new editor instance. Customize the instance by passing the `options` parameter. The example below uses all options and their defaults:\n\n```javascript\nvar opts = {\n  container: 'epiceditor',\n  textarea: null,\n  basePath: 'epiceditor',\n  clientSideStorage: true,\n  localStorageName: 'epiceditor',\n  useNativeFullsreen: true,\n  parser: marked,\n  file: {\n    name: 'epiceditor',\n    defaultContent: '',\n    autoSave: 100\n  },\n  theme: {\n    base: '/themes/base/epiceditor.css',\n    preview: '/themes/preview/preview-dark.css',\n    editor: '/themes/editor/epic-dark.css'\n  },\n  button: {\n    preview: true,\n    fullscreen: true\n  },\n  focusOnLoad: false,\n  shortcut: {\n    modifier: 18,\n    fullscreen: 70,\n    preview: 80\n  },\n  string: {\n    togglePreview: 'Toggle Preview Mode',\n    toggleEdit: 'Toggle Edit Mode',\n    toggleFullscreen: 'Enter Fullscreen'\n  }\n}\nvar editor = new EpicEditor(opts);\n```\n\n### Options\n<table cellspacing=\"0\">\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n    <th>Default</th>\n  </tr>\n  <tr>\n    <td><code>container</code></td>\n    <td>The ID (string) or element (object) of the target container in which you want the editor to appear.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>textarea</code></td>\n    <td>The ID (string) or element (object) of a textarea you would like to sync the editor's content with. On page load if there is content in the textarea, the editor will use that as it's content.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>basePath</code></td>\n    <td>The base path of the directory containing the <code>/themes</code>, <code>/images</code>, etc.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>clientSideStorage</code></td>\n    <td>Setting this to false will disable localStorage.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>localStorageName</code></td>\n    <td>The name to use for the localStorage object.</td>\n    <td><code>epiceditor</code></td>\n  </tr>\n  <tr>\n    <td><code>useNativeFullscreen</code></td>\n    <td>Set to false to always use faux fullscreen (the same as what is used for unsupported browsers).</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>parser</code></td>\n    <td>[Marked](https://github.com/chjj/marked) is the only parser built into EpicEditor, but you can customize or toggle this by passing a parsing function to this option. For example:<br><code>parser: MyCustomParser.parse</code></td>\n    <td><code>marked</code></td>\n  </tr>\n  <tr>\n    <td><code>focusOnLoad</code></td>\n    <td>If <code>true</code>, editor will focus on load.</td>\n    <td><code>false</code></td>\n  </tr>\n  <tr>\n    <td><code>file.name</code></td>\n    <td>If no file exists with this name a new one will be made, otherwise the existing will be opened.</td>\n    <td>container ID</td>\n  </tr>\n  <tr>\n    <td><code>file.defaultContent</code></td>\n    <td>The content to show if no content exists for a file. NOTE: if the <code>textarea</code> option is used, the textarea's value will take precedence over <code>defaultContent</code>.</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>file.autoSave</code></td>\n    <td>How often to auto save the file in milliseconds. Set to <code>false</code> to turn it off.</td>\n    <td><code>100</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.base</code></td>\n    <td>The base styles such as the utility bar with the buttons.</td>\n    <td><code>themes/base/epiceditor.css</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.editor</code></td>\n    <td>The theme for the editor which is the area you type into.</td>\n    <td><code>themes/editor/epic-dark.css</code></td>\n  </tr>\n  <tr>\n    <td><code>theme.preview</code></td>\n    <td>The theme for the previewer.</td>\n    <td><code>themes/preview/github.css</code></td>\n  </tr>\n  <tr>\n    <td><code>button</code></td>\n    <td>If set to <code>false</code> will remove all buttons.</td>\n    <td>All buttons set to <code>true</code>.</td>\n  </tr>\n  <tr>\n    <td><code>button.preview</code></td>\n    <td>If set to <code>false</code> will remove the preview button.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>button.fullscreen</code></td>\n    <td>If set to <code>false</code> will remove the fullscreen button.</td>\n    <td><code>true</code></td>\n  </tr>\n  <tr>\n    <td><code>shortcut.modifier</code></td>\n    <td>The key to hold while holding the other shortcut keys to trigger a key combo.</td>\n    <td><code>18</code> (<code>alt</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>shortcut.fullscreen</code></td>\n    <td>The shortcut to open fullscreen.</td>\n    <td><code>70</code> (<code>f</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>shortcut.preview</code></td>\n    <td>The shortcut to toggle the previewer.</td>\n    <td><code>80</code> (<code>p</code> key)</td>\n  </tr>\n  <tr>\n    <td><code>string.togglePreview</code></td>\n    <td>The tooltip text that appears when hovering the preview icon.</td>\n    <td><code>Toggle Preview Mode</code></td>\n  </tr>\n  <tr>\n    <td><code>string.toggleEdit</code></td>\n    <td>The tooltip text that appears when hovering the edit icon.</td>\n    <td><code>Toggle Edit Mode</code></td>\n  </tr>\n  <tr>\n    <td><code>string.toggleFullscreen</code></td>\n    <td>The tooltip text that appears when hovering the fullscreen icon.</td>\n    <td><code>Enter Fullscreen</code></td>\n  </tr>\n</table>\n\n### load([_callback_])\n\nLoads the editor by inserting it into the DOM by creating an `iframe`. Will trigger the `load` event, or you can provide a callback.\n\n```javascript\neditor.load(function () {\n  console.log(\"Editor loaded.\")\n});\n```\n\n### unload([_callback_])\n\nUnloads the editor by removing the `iframe`. Keeps any options and file contents so you can easily call `.load()` again. Will trigger the `unload` event, or you can provide a callback.\n\n```javascript\neditor.unload(function () {\n  console.log(\"Editor unloaded.\")\n});\n```\n\n### getElement(_element_)\n\nGrabs an editor element for easy DOM manipulation. See the Themes section below for more on the layout of EpicEditor elements.\n\n* `container`: The element given at setup in the options.\n* `wrapper`: The wrapping `<div>` containing the 2 editor and previewer iframes.\n* `wrapperIframe`: The iframe containing the `wrapper` element.\n* `editor`: The #document of the editor iframe (i.e. you could do `editor.getElement('editor').body`).\n* `editorIframe`: The iframe containing the `editor` element.\n* `previewer`: The #document of the previewer iframe (i.e. you could do `editor.getElement('previewer').body`).\n* `previewerIframe`: The iframe containing the `previewer` element.\n\n```javascript\nsomeBtn.onclick = function () {\n  console.log(editor.getElement('editor').body.innerHTML); // Returns the editor's content\n}\n```\n\n### is(_state_)\n\nReturns a boolean for the requested state. Useful when you need to know if the editor is loaded yet for example. Below is a list of supported states:\n\n* `loaded`\n* `unloaded`\n* `edit`\n* `preview`\n* `fullscreen`\n\n```javascript\nfullscreenBtn.onclick = function () {\n  if (!editor.is('loaded')) { return; }\n  editor.enterFullscreen();\n}\n```\n\n### open(_filename_)\n\nOpens a file into the editor.\n\n```javascript\nopenFileBtn.onclick = function () {\n  editor.open('some-file'); // Opens a file when the user clicks this button\n}\n```\n\n### importFile([_filename_],[_content_])\n\nImports a string of content into a file. If the file already exists, it will be overwritten. Useful if you want to inject a bunch of content via AJAX. Will also run `.open()` after import automatically.\n\n```javascript\nimportFileBtn.onclick = function () {\n  editor.importFile('some-file',\"#Imported markdown\\nFancy, huh?\"); //Imports a file when the user clicks this button\n}\n```\n\n### exportFile([_filename_],[_type_])\n\nReturns the raw content of the file by default, or if given a `type` will return the content converted into that type. If you leave both parameters `null` it will return the current document's raw content.\n\n```javascript\nsyncWithServerBtn.onclick = function () {\n  var theContent = editor.exportFile();\n  saveToServerAjaxCall('/save', {data:theContent}, function () {\n    console.log('Data was saved to the database.');\n  });\n}\n```\n\n### rename(_oldName_, _newName_)\n\nRenames a file.\n\n```javascript\nrenameFileBtn.onclick = function () {\n  var newName = prompt('What do you want to rename this file to?');\n  editor.rename('old-filename.md', newName); //Prompts a user and renames a file on button click\n}\n```\n\n### save()\n\nManually saves a file. EpicEditor will save continuously every 100ms by default, but if you set `autoSave` in the options to `false` or to longer intervals it's useful to manually save.\n\n```javascript\nsaveFileBtn.onclick = function () {\n  editor.save();\n}\n```\n\n### remove(_name_)\n\nDeletes a file.\n\n```javascript\nremoveFileBtn.onclick = function () {\n  editor.remove('example.md');\n}\n```\n\n### getFiles([_name_])\n\nIf no `name` is given it returns an object containing all the file objects. If a `name` is specified it will return just that single file object.\n\n```javascript\nvar files = editor.getFiles();\nfor (x in files) {\n  console.log('File: ' + x); //Returns the name of each file\n};\n```\n\n### on(_event_, _handler_)\n\nSets up an event handler (callback) for a specified event. For all event types, see the Events section below.\n\n```javascript\neditor.on('unload', function () {\n  console.log('Editor was removed');\n});\n```\n\n### emit(_event_)\n\nFires an event programatically. Similar to jQuery's `.trigger()`\n\n```javascript\neditor.emit('unload'); // Triggers the handler provided in the \"on\" method above\n```\n\n### removeListener(_event_, [_handler_])\n\nAllows you to remove all listeners for an event, or just the specified one.\n\n```javascript\neditor.removeListener('unload'); //The handler above would no longer fire\n```\n\n### preview()\n\nPuts the editor into preview mode.\n\n```javascript\npreviewBtn.onclick = function () {\n  editor.preview();\n}\n```\n\n### edit()\n\nPuts the editor into edit mode.\n\n```javascript\neditBtn.onclick = function () {\n  editor.edit();\n}\n```\n### enterFullscreen()\n\nPuts the editor into fullscreen mode.\n\n**Note:** due to browser security restrictions, calling `enterFullscreen` programmatically\nlike this will not trigger native fullscreen. Native fullscreen can only be triggered by a user interaction like mousedown or keyup.\n\n```javascript\nenterFullscreenBtn.onclick = function () {\n  editor.enterFullscreen();\n}\n```\n### exitFullscreen()\n\nCloses fullscreen mode.\n\n```javascript\nexitFullscreenBtn.onclick = function () {\n  editor.exitFullscreen();\n}\n```\n\n### reflow([type], [callback])\n\n`reflow()` allows you to \"reflow\" the editor in it's container. For example, let's say you increased\nthe height of your wrapping element and want the editor to resize too. You could call `reflow`\nand the editor will resize to fit. You can pass it one of two strings as the first parameter to\nconstrain the reflow to either `width` or `height`.\n\nIt also provides you with a callback parameter if you'd like to do something after the resize is finished.\nThe callback will return the new width and/or height in an object. Additionally, you can also listen for\nthe `reflow` event. This will also give you back the new size.\n\n**Note:** If you call `reflow()` or `reflow('width')` and you have a fluid width container\nEpicEditor will no longer be fluid because doing a reflow on the width sets an inline style on the editor.\n\n```javascript\n// For an editor that takes up the whole browser window:\nwindow.onresize = function () {\n  editor.reflow();\n}\n\n// Constrain the reflow to just height:\nsomeDiv.resizeHeightHandle = function () {\n  editor.reflow('height');\n}\n\n// Same as the first example, but this has a callback\nwindow.onresize = function () {\n  editor.reflow(function (data) {\n    console.log('width: ', data.width, ' ', 'height: ', data.height);\n  });\n}\n```\n\n## Events\n\nYou can hook into specific events in EpicEditor with <a href=\"#onevent-handler\"><code>on()</code></a> such as when a file is\ncreated, removed, or updated. Below is a complete list of currently supported events and their description.\n\n<table cellspacing=\"0\" class=\"event-table\">\n  <tr>\n    <th>Event Name</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>create</code></td>\n    <td>Fires whenever a new file is created.</td>\n  </tr>\n  <tr>\n    <td><code>read</code></td>\n    <td>Fires whenever a file is read.</td>\n  </tr>\n  <tr>\n    <td><code>update</code></td>\n    <td>Fires whenever a file is updated.</td>\n  </tr>\n  <tr>\n    <td><code>remove</code></td>\n    <td>Fires whenever a file is deleted.</td>\n  </tr>\n  <tr>\n    <td><code>load</code></td>\n    <td>Fires when the editor loads via <code>load()</code>.</td>\n  </tr>\n  <tr>\n    <td><code>unload</code></td>\n    <td>Fires whenever the editor is unloaded via <code>unload()</code></td>\n  </tr>\n  <tr>\n    <td><code>preview</code></td>\n    <td>Fires whenever the previewer is opened (excluding fullscreen) via <code>preview()</code> or the preview button.</td>\n  </tr>\n  <tr>\n    <td><code>edit</code></td>\n    <td>Fires whenever the editor is opened (excluding fullscreen) via <code>edit()</code> or the edit button.</td>\n  </tr>\n  <tr>\n    <td><code>fullscreenenter</code></td>\n    <td>Fires whenever the editor opens in fullscreen via <code>fullscreen()</code> or the fullscreen button.</td>\n  </tr>\n  <tr>\n    <td><code>fullscreenexit</code></td>\n    <td>Fires whenever the editor closes in fullscreen via <code>fullscreen()</code> or the fullscreen button.</td>\n  </tr>\n  <tr>\n    <td><code>save</code></td>\n    <td>Fires whenever the file is saved whether by EpicEditor automatically or when <code>save()</code> is called.</td>\n  </tr>\n  <tr>\n    <td><code>open</code></td>\n    <td>Fires whenever a file is opened or loads automatically by EpicEditor or when <code>open()</code> is called.</td>\n  </tr>\n  <tr>\n    <td><code>reflow</code></td>\n    <td>Fires whenever <code>reflow()</code> is called. Will return the new dimensions in the callback.</td>\n  </tr>\n</table>\n\n## Themes\n\nTheming is easy in EpicEditor. There are three different `<iframe>`s which means styles wont leak between the \"chrome\" of\nEpicEditor, previewer, or editor. Each one is like it's own web page. In the `themes` directory  you'll see `base`, `preview`,  and\n`editor`. The base styles are for the \"chrome\" of the editor which contains elements such as the utility bar containing the icons.\nThe editor is the styles for the contents of editor `<iframe>` and the preview styles are applied to the preview `<iframe>`.\n\nThe HTML of a generated editor (excluding contents) looks like this:\n\n```html\n<div id=\"container\">\n  <iframe id=\"epiceditor-instance-id\">\n    <html>\n      <head>\n        <link type=\"text/css\" id=\"\" rel=\"stylesheet\" href=\"epiceditor/themes/base/epiceditor.css\" media=\"screen\">\n      </head>\n      <body>\n        <div id=\"epiceditor-wrapper\">\n          <iframe id=\"epiceditor-editor-frame\">\n            <html>\n              <head>\n                <link type=\"text/css\" rel=\"stylesheet\" href=\"epiceditor/themes/editor/epic-dark.css\" media=\"screen\">\n              </head>\n              <body contenteditable=\"true\">\n                <!-- raw content -->\n              </body>\n            </html>\n          </iframe>\n          <iframe id=\"epiceditor-previewer-frame\">\n            <html>\n              <head>\n                <link type=\"text/css\" rel=\"stylesheet\" href=\"epiceditor/themes/preview/github.css\" media=\"screen\">\n              </head>\n              <body>\n                <div id=\"epiceditor-preview\">\n                  <!-- rendered html -->\n                </div>\n              </body>\n            </html>\n          </iframe>\n          <div id=\"epiceditor-utilbar\">\n            <img width=\"16\" src=\"epiceditor/images/preview.png\" class=\"epiceditor-toggle-btn\">\n            <img width=\"16\" src=\"epiceditor/images/fullscreen.png\" class=\"epiceditor-fullscreen-btn\">\n          </div>\n        </div>\n      </body>\n    </html>\n  </iframe>\n</div>\n```\n\n## Custom Parsers\n\nEpicEditor is set up to allow you to use _any_ parser that accepts and returns a string. This means you can use any flavor of Markdown, process Textile, or even create a simple HTML editor/previewer (`parser: false`). The possibilities are endless. Just make the parser available and pass its parsing function to the EpicEditor setting and you should be all set.\n\nFor even more customization/optimization you can replace the default built-in processor on build. Running `jake build parser=path/to/parser.js` will override the default Marked build and replace it with your custom script.\n\nSee the [custom parsers wiki page](https://github.com/OscarGodson/EpicEditor/wiki/Using-A-Custom-Parser) for more.\n\n## Contributing\n\nContributions are greatly encouraged and appreciated. For more on ways to contribute please check the wiki: [Contributing Guide](https://github.com/OscarGodson/EpicEditor/wiki/Contributing).\n\n## Credits\n\nEpicEditor relies on [Marked](https://github.com/chjj/marked) to parse markdown and is brought to you in part by [Oscar Godson](http://twitter.com/oscargodson) and [John Donahue](http://twitter.com/johnmdonahue). Special thanks to [Adam Bickford](http://twitter.com/adam_bickford) for the bug fixes and being the QA for pull requests. Lastly, huge thanks to [Sebastian Nitu](http://twitter.com/sebnitu) for the amazing logo and doc styles.\n",
  "readmeFilename": "README.md",
  "_id": "epiceditor@0.2.0",
  "dist": {
    "shasum": "b7b62373b635eec25f1547a40bd41c4e2b2181be",
    "tarball": "http://registry.npmjs.org/epiceditor/-/epiceditor-0.2.0.tgz"
  },
  "_npmVersion": "1.1.69",
  "_npmUser": {
    "name": "digitalkaoz",
    "email": "seroscho@gmail.com"
  },
  "maintainers": [
    {
      "name": "digitalkaoz",
      "email": "seroscho@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "b7b62373b635eec25f1547a40bd41c4e2b2181be",
  "_resolved": "https://registry.npmjs.org/epiceditor/-/epiceditor-0.2.0.tgz",
  "_from": "epiceditor@*",
  "bugs": {
    "url": "https://github.com/OscarGodson/EpicEditor/issues"
  },
  "homepage": "https://github.com/OscarGodson/EpicEditor"
}
